package dmarc

import (
	"testing"
)

func TestReadGZ(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name          string
		content       []byte
		valid         bool
		expectedPlain string
	}{
		{
			name:          "valid gz",
			content:       []byte{0x1f, 0x8b, 0x08, 0x08, 0x71, 0x7e, 0x43, 0x61, 0x00, 0x03, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x2b, 0x49, 0x2d, 0x2e, 0xe1, 0x02, 0x00, 0xc6, 0x35, 0xb9, 0x3b, 0x05, 0x00, 0x00, 0x00},
			valid:         true,
			expectedPlain: "test\n",
		},
		{
			name:    "invalid gz with gz header",
			content: []byte{0x1f, 0x8b, 0xa},
			valid:   false,
		},
		{
			name:    "invalid gz",
			content: []byte{0x00, 0x00, 0xa},
			valid:   false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel() // marks each test case as capable of running in parallel with each other

			plainContent, err := readGZ(tt.content)
			if !tt.valid && err == nil {
				t.Fatal("expected an error but got none")
			} else if tt.valid && err != nil {
				t.Fatalf("got unexpected error: %v", err)
			}

			t.Log(plainContent)
			t.Log(tt.expectedPlain)

			if tt.valid && string(plainContent) != tt.expectedPlain {
				t.Fatalf("gz content mismatch - expected %s got %s", tt.expectedPlain, plainContent)
			}
		})
	}
}

func TestReadZIP(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name             string
		content          []byte
		valid            bool
		expectedFilename string
		expectedPlain    string
	}{
		{
			name:             "valid zip",
			content:          []byte{0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x9b, 0x30, 0x53, 0xc6, 0x35, 0xb9, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1c, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x55, 0x54, 0x09, 0x00, 0x03, 0x71, 0x7e, 0x43, 0x61, 0xb9, 0x82, 0x43, 0x61, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x0a, 0x50, 0x4b, 0x01, 0x02, 0x1e, 0x03, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x9b, 0x30, 0x53, 0xc6, 0x35, 0xb9, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x55, 0x54, 0x05, 0x00, 0x03, 0x71, 0x7e, 0x43, 0x61, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00},
			valid:            true,
			expectedFilename: "test.txt",
			expectedPlain:    "test\n",
		},
		{
			name:    "password protected zip",
			content: []byte{0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x09, 0x00, 0x00, 0x00, 0x67, 0x9b, 0x30, 0x53, 0xc6, 0x35, 0xb9, 0x3b, 0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1c, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x55, 0x54, 0x09, 0x00, 0x03, 0x71, 0x7e, 0x43, 0x61, 0xb9, 0x82, 0x43, 0x61, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x91, 0xc3, 0x74, 0x34, 0xc6, 0xee, 0x7d, 0x54, 0x32, 0xc5, 0xec, 0x82, 0x05, 0x76, 0xc7, 0xd2, 0x72, 0x50, 0x4b, 0x07, 0x08, 0xc6, 0x35, 0xb9, 0x3b, 0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x01, 0x02, 0x1e, 0x03, 0x0a, 0x00, 0x09, 0x00, 0x00, 0x00, 0x67, 0x9b, 0x30, 0x53, 0xc6, 0x35, 0xb9, 0x3b, 0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x55, 0x54, 0x05, 0x00, 0x03, 0x71, 0x7e, 0x43, 0x61, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00},
			valid:   false,
		},
		{
			name:    "invalid zip with zip header",
			content: []byte{0x50, 0x4b, 0x03, 0x04, 0x0a},
			valid:   false,
		},
		{
			name:             "valid zip with folders and multiple files",
			content:          []byte{0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x9f, 0x30, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x31, 0x2f, 0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9f, 0x30, 0x53, 0xc6, 0x35, 0xb9, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x74, 0x65, 0x73, 0x74, 0x0a, 0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x9f, 0x30, 0x53, 0x80, 0x7a, 0x99, 0xfb, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x74, 0x78, 0x74, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x9f, 0x30, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x32, 0x2f, 0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x9f, 0x30, 0x53, 0x80, 0x7a, 0x99, 0xfb, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x32, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x74, 0x78, 0x74, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x9f, 0x30, 0x53, 0x80, 0x7a, 0x99, 0xfb, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x74, 0x78, 0x74, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x9f, 0x30, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x31, 0x2f, 0x0a, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x02, 0xd2, 0xba, 0x42, 0x24, 0xab, 0xd7, 0x01, 0x02, 0xd2, 0xba, 0x42, 0x24, 0xab, 0xd7, 0x01, 0x02, 0xd2, 0xba, 0x42, 0x24, 0xab, 0xd7, 0x01, 0x50, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9f, 0x30, 0x53, 0xc6, 0x35, 0xb9, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x0a, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0xee, 0xe6, 0x4c, 0x34, 0x24, 0xab, 0xd7, 0x01, 0x61, 0xcd, 0x8a, 0x50, 0x24, 0xab, 0xd7, 0x01, 0xc3, 0xbf, 0x4c, 0x34, 0x24, 0xab, 0xd7, 0x01, 0x50, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x9f, 0x30, 0x53, 0x80, 0x7a, 0x99, 0xfb, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x74, 0x78, 0x74, 0x0a, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x0e, 0x1f, 0x45, 0x53, 0x24, 0xab, 0xd7, 0x01, 0xbc, 0xc5, 0xe6, 0xb0, 0x24, 0xab, 0xd7, 0x01, 0x96, 0x27, 0xc2, 0x4d, 0x24, 0xab, 0xd7, 0x01, 0x50, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x9f, 0x30, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x32, 0x2f, 0x0a, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x4e, 0x66, 0x07, 0x45, 0x24, 0xab, 0xd7, 0x01, 0x4e, 0x66, 0x07, 0x45, 0x24, 0xab, 0xd7, 0x01, 0x4e, 0x66, 0x07, 0x45, 0x24, 0xab, 0xd7, 0x01, 0x50, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x9f, 0x30, 0x53, 0x80, 0x7a, 0x99, 0xfb, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x32, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x74, 0x78, 0x74, 0x0a, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x0e, 0x1f, 0x45, 0x53, 0x24, 0xab, 0xd7, 0x01, 0x75, 0x8c, 0x78, 0x56, 0x24, 0xab, 0xd7, 0x01, 0x96, 0x27, 0xc2, 0x4d, 0x24, 0xab, 0xd7, 0x01, 0x50, 0x4b, 0x01, 0x02, 0x3f, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x9f, 0x30, 0x53, 0x80, 0x7a, 0x99, 0xfb, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xf2, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x74, 0x78, 0x74, 0x0a, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x0e, 0x1f, 0x45, 0x53, 0x24, 0xab, 0xd7, 0x01, 0xc1, 0x89, 0x91, 0xa9, 0x24, 0xab, 0xd7, 0x01, 0x96, 0x27, 0xc2, 0x4d, 0x24, 0xab, 0xd7, 0x01, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x40, 0x02, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x00, 0x00},
			valid:            true,
			expectedFilename: "test.txt",
			expectedPlain:    "test\n",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel() // marks each test case as capable of running in parallel with each other

			plainContent, filename, err := readZIP(tt.content)
			if !tt.valid && err == nil {
				t.Fatal("expected an error but got none")
			} else if tt.valid && err != nil {
				t.Fatalf("got unexpected error: %v", err)
			}

			if tt.valid && filename != tt.expectedFilename {
				t.Fatalf("zip filename mismatch - expected %s got %s", tt.expectedFilename, filename)
			}

			if tt.valid && string(plainContent) != tt.expectedPlain {
				t.Fatalf("zip content mismatch - expected %s got %s", tt.expectedPlain, plainContent)
			}
		})
	}
}
